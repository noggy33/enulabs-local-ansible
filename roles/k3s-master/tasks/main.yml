---
# K3sマスター用ロール（最小構成・不要な処理を削除）

# 1. Prerequisites
- name: Install prerequisites
  ansible.builtin.apt:
    name:
      - curl
      - iptables
      - iptables-persistent
    state: present
    update_cache: yes
  when: inventory_hostname == groups['pi4-master'][0]

# 2. Verify cgroup v2 enabled
- name: /boot/配下のcmdline.txtの実体を探索
  become: true
  find:
    paths:
      - /boot
      - /boot/firmware
    patterns: cmdline.txt
  register: cmdline_result
  when: inventory_hostname == groups['pi4-master'][0]

- name: cmdline.txtのパスをセット
  set_fact:
    actual_cmdline_path: "{{ (cmdline_result.files | selectattr('path', 'search', '/boot/firmware') | list | length > 0) | ternary('/boot/firmware/cmdline.txt', '/boot/cmdline.txt') }}"
  when: cmdline_result.files | length > 0 and inventory_hostname == groups['pi4-master'][0]

- name: Verify cgroup v2 parameters in cmdline
  ansible.builtin.command: cat {{ actual_cmdline_path }}
  register: proc_cmdline
  changed_when: false
  when: inventory_hostname == groups['pi4-master'][0]

- name: Fail if cgroup v2 not enabled
  ansible.builtin.fail:
    msg: "cgroup v2 is not enabled in {{ actual_cmdline_path }}"
  when: >
    (proc_cmdline.stdout is not regex('cgroup_memory=1')
    or proc_cmdline.stdout is not regex('cgroup_enable=memory')
    or proc_cmdline.stdout is not regex('systemd.unified_cgroup_hierarchy=1'))
    and inventory_hostname == groups['pi4-master'][0]

# 3. Install and start K3s
- name: Install K3s server
  ansible.builtin.shell: |
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="{{ k3s_version | default('v1.32.5+k3s1') }}" sh -
  args:
    creates: /usr/local/bin/k3s
  when: inventory_hostname == groups['pi4-master'][0]

- name: Ensure K3s service is running
  ansible.builtin.systemd:
    name: k3s
    state: started
    enabled: yes
  when: inventory_hostname == groups['pi4-master'][0]

# 4. Wait for API
- name: Wait for API server
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 6443
    delay: 5
    timeout: 120
  when: inventory_hostname == groups['pi4-master'][0]

# 5. Retrieve join token and kubeconfig (controller側)
- block:
    - name: Fetch join token to controller
      ansible.builtin.fetch:
        src: /var/lib/rancher/k3s/server/node-token
        dest: "{{ playbook_dir }}/files/node-token"
        flat: yes

    - name: Fetch kubeconfig to controller
      ansible.builtin.fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: "{{ playbook_dir }}/files/k3s.yaml"
        flat: yes

    - name: Update server endpoint in fetched kubeconfig
      ansible.builtin.replace:
        path: "{{ playbook_dir }}/files/k3s.yaml"
        regexp: '^\s*server:.*'
        replace: "    server: https://{{ hostvars[groups['pi4-master'][0]].ansible_default_ipv4.address }}:6443"
      delegate_to: localhost

    - name: Debug master IP address for kubeconfig
      debug:
        msg: "master_ip={{ hostvars[groups['pi4-master'][0]].ansible_default_ipv4.address }}"
  when: inventory_hostname == groups['pi4-master'][0]

# 6. Deploy kubeconfig to master user home
- block:
    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0700'

    - name: Copy kubeconfig to user home
      ansible.builtin.copy:
        src: "/etc/rancher/k3s/k3s.yaml"
        dest: "/home/{{ ansible_user }}/.kube/config"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
  become: true
  when: inventory_hostname == groups['pi4-master'][0]
